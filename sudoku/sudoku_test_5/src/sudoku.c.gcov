        -:    0:Source:sudoku.c
        -:    0:Graph:sudoku.gcno
        -:    0:Data:sudoku.gcda
        -:    0:Runs:12
        -:    1:#include "sudoku.h"
        -:    2:
        -:    3:#include "grid.h"
        -:    4:
        -:    5:#include <stdbool.h>
        -:    6:#include <stdio.h>
        -:    7:#include <stdlib.h>
        -:    8:#include <unistd.h>
        -:    9:
        -:   10:#include "/home/thomas/Application/klee/include/klee/klee.h"
        -:   11:#include <err.h>
        -:   12:#include <getopt.h>
        -:   13:#include <math.h>
        -:   14:#include <string.h>
        -:   15:#include <time.h>
        -:   16:
        -:   17:typedef enum { mode_first, mode_all, mode_generate, mode_unique } mode_type;
        -:   18:
        -:   19:static bool verbose = false;
        -:   20:static bool error = false;
        -:   21:static size_t fill_ratio = 0;
        -:   22:static size_t nb_choice = 0;
        -:   23:static size_t nb_backtrack = 0;
        -:   24:static size_t nb_sol = 0;
        -:   25:static clock_t clock_debut;
        -:   26:
        -:   27:/************ FILE_PARSER ************/
      119:   28:static grid_t *file_parser (char *filename) {
      119:   29:  FILE *input_file = fopen (filename, "r+");
      119:   30:  if (input_file == NULL) {
    #####:   31:    warnx ("error : the file cannot be opened correctly\n");
    #####:   32:    goto error;
        -:   33:  }
        -:   34:
      119:   35:  char first_row[MAX_GRID_SIZE];
      119:   36:  size_t size = MAX_GRID_SIZE;
      119:   37:  size_t row = 0;
      119:   38:  size_t column = 0;
      119:   39:  bool commentary = false;
      119:   40:  grid_t *grid = NULL;
      119:   41:  size_t nb_fill = 0;
        -:   42:
      119:   43:  int c = fgetc (input_file);
      119:   44:  if (c == EOF) {
        1:   45:    warnx ("warning : '%s' : empty file\n", filename);
        1:   46:    goto error;
        -:   47:  }
        -:   48:
   189712:   49:  while (c != EOF) {
   189602:   50:    switch (c) {
        -:   51:    case ' ':
        -:   52:
        -:   53:    case '\t':
        -:   54:      break;
        -:   55:
        -:   56:    case '#':
       60:   57:      commentary = true;
        -:   58:      break;
        -:   59:
     2503:   60:    case '\n':
     2503:   61:      commentary = false;
        -:   62:
        -:   63:      /* Creating the grid and adding the first line */
     2503:   64:      if (row == 0 && !commentary && column != 0) {
      114:   65:        size = column;
      114:   66:        if (!grid_check_size (size)) {
        1:   67:          warnx ("warning : '%s' : invalid size of grid\n", filename);
        1:   68:          goto error;
        -:   69:        }
        -:   70:
      113:   71:        grid = grid_alloc (size);
      113:   72:        if (grid == NULL) {
    #####:   73:          warnx ("warning : '%s' : allocation of the grid failed\n", filename);
    #####:   74:          goto error;
        -:   75:        }
        -:   76:
     2639:   77:        for (size_t i = 0; i < size; i++) {
     2528:   78:          if (!grid_check_char (grid, first_row[i])) {
        2:   79:            warnx ("warning : '%s' : wrong character '%c' at line 1\n",
        -:   80:                   filename, first_row[i]);
        2:   81:            goto error_free;
        -:   82:          }
     2526:   83:          grid_set_cell (grid, 0, i, first_row[i]);
        -:   84:
     2526:   85:          if (first_row[i] != '_') {
     1314:   86:            nb_fill++;
        -:   87:          }
        -:   88:        }
        -:   89:      }
        -:   90:
     2500:   91:      if (row != 0 && column != size && column != 0) {
        2:   92:        warnx ("warning : '%s' : line %li is malformed! (wrong number of "
        -:   93:               "columns)\n",
        -:   94:               filename, row + 1);
        2:   95:        goto error_free;
        -:   96:      }
        -:   97:
     2478:   98:      if (column != 0) {
     2475:   99:        column = 0;
     2475:  100:        row += 1;
        -:  101:      }
        -:  102:      break;
        -:  103:
    94362:  104:    default:
    94362:  105:      if (commentary) {
        -:  106:        break;
        -:  107:      }
        -:  108:
    94308:  109:      if (grid != NULL && !grid_check_char (grid, c)) {
        1:  110:        warnx ("warning : '%s' : wrong character '%c' at line %li\n", filename,
        -:  111:               c, row + 1);
        1:  112:        goto error_free;
        -:  113:      }
        -:  114:
    94307:  115:      if (row == size) {
        1:  116:        warnx ("warning : '%s' : grid has additional line!\n", filename);
        1:  117:        goto error_free;
        -:  118:      }
        -:  119:
    94306:  120:      if (column == size) {
        1:  121:        warnx ("warning : '%s' : line %li is malformed! (wrong number of "
        -:  122:               "columns)\n",
        -:  123:               filename, row + 1);
        1:  124:        goto error_free;
        -:  125:      }
        -:  126:
    94305:  127:      if (grid == NULL) {
     2551:  128:        first_row[column] = c;
     2551:  129:        column++;
        -:  130:
        -:  131:      } else {
    91754:  132:        grid_set_cell (grid, row, column, c);
        -:  133:
    91754:  134:        if (c != '_') {
    54337:  135:          nb_fill++;
        -:  136:        }
        -:  137:
    91754:  138:        column++;
        -:  139:      }
        -:  140:    }
   189594:  141:    c = fgetc (input_file);
        -:  142:  }
        -:  143:
        -:  144:  /* Case if size = 1 and file with no '\n */
      110:  145:  if (row == 0 && column == 1) {
        2:  146:    size = 1;
        2:  147:    grid = grid_alloc (size);
        -:  148:
        2:  149:    if (!grid_check_char (grid, first_row[0])) {
        1:  150:      warnx ("warning : '%s' : wrong character '%c' at line 1\n", filename,
        -:  151:             first_row[0]);
        1:  152:      goto error_free;
        -:  153:    }
        -:  154:
        1:  155:    grid_set_cell (grid, 0, 0, first_row[0]);
        -:  156:
        1:  157:    if (first_row[0] != '_') {
    #####:  158:      nb_fill++;
        -:  159:    }
        -:  160:
        1:  161:    size_t size_full = grid_get_size (grid) * grid_get_size (grid);
        1:  162:    fill_ratio = round (100 * nb_fill / size_full);
        -:  163:
        1:  164:    fclose (input_file);
        1:  165:    return grid;
        -:  166:  }
        -:  167:
        -:  168:  /* Case if EOF with non '\n' */
      108:  169:  if (column == size && row == size - 1) {
        4:  170:    size_t size_full = grid_get_size (grid) * grid_get_size (grid);
        4:  171:    fill_ratio = round (100 * nb_fill / size_full);
        -:  172:
        4:  173:    fclose (input_file);
        4:  174:    return grid;
        -:  175:  }
        -:  176:
      104:  177:  if (column != 0) {
        1:  178:    warnx ("warning : '%s' : line %li is malformed! (wrong number of "
        -:  179:           "columns)\n",
        -:  180:           filename, row + 1);
        1:  181:    goto error_free;
        -:  182:  }
        -:  183:
      103:  184:  if (grid == NULL) {
        2:  185:    warnx ("warning : '%s' : file with no sudoku\n", filename);
        2:  186:    goto error_free;
        -:  187:  }
        -:  188:
      101:  189:  if (row != size) {
        1:  190:    warnx ("warning : '%s' : grid has %li missing line(s)!\n", filename,
        -:  191:           size - row);
        1:  192:    goto error_free;
        -:  193:  }
        -:  194:
      100:  195:  size_t size_full = grid_get_size (grid) * grid_get_size (grid);
      100:  196:  fill_ratio = 100 * nb_fill / size_full;
        -:  197:
      100:  198:  fclose (input_file);
      100:  199:  return grid;
        -:  200:
        -:  201:/* Error handling */
       12:  202:error_free:
       12:  203:  grid_free (grid);
        -:  204:
       14:  205:error:
       14:  206:  error = true;
       14:  207:  fclose (input_file);
       14:  208:  return NULL;
        -:  209:}
        -:  210:
        -:  211:/************ GRID_BACKTRACK ************/
    42291:  212:static grid_t *grid_backtrack (grid_t *grid, mode_type mode,
        -:  213:                               FILE *output_file) {
    83951:  214:  double temps_ecoule = ((double)(clock () - clock_debut)) / CLOCKS_PER_SEC;
        -:  215:  /* Number due to empiric test */
    83951:  216:  if (mode == mode_generate && temps_ecoule >= 20.0) {
        -:  217:    return grid;
        -:  218:  }
    83951:  219:  if (!grid_is_consistent (grid)) {
        -:  220:    return NULL;
        -:  221:  }
        -:  222:
    74754:  223:  status_t status = grid_heuristic (grid);
    74754:  224:  if ((mode == mode_first || mode == mode_generate) && status == grid_solved) {
        -:  225:    return grid;
        -:  226:  }
        -:  227:
    74684:  228:  if (mode == mode_all && status == grid_solved) {
    26410:  229:    nb_sol = nb_sol + 1;
    26410:  230:    fprintf (output_file, "# Solution #%li\n", nb_sol);
    26410:  231:    grid_print (grid, output_file);
    26410:  232:    return NULL;
        -:  233:  }
        -:  234:
    48274:  235:  if (mode == mode_unique && status == grid_solved) {
       78:  236:    nb_sol = nb_sol + 1;
        -:  237:
       78:  238:    if (nb_sol >= 2) {
        -:  239:      return grid;
        -:  240:    }
        -:  241:
        -:  242:    return NULL;
        -:  243:  }
        -:  244:
    48196:  245:  prng_init ();
    48196:  246:  choice_t *choice = grid_choice (grid);
        -:  247:
    48196:  248:  if (choice == NULL || grid_choice_is_empty (*choice)) {
     6093:  249:    free (choice);
     6093:  250:    return NULL;
        -:  251:  }
    42103:  252:  nb_choice++;
        -:  253:
    42103:  254:  grid_t *copy = grid_copy (grid);
        -:  255:
    42103:  256:  grid_choice_apply (copy, *choice);
        -:  257:
    42103:  258:  grid_t *grid_returned = grid_backtrack (copy, mode, output_file);
    42103:  259:  nb_backtrack++;
        -:  260:
    42103:  261:  if ((mode == mode_first || mode == mode_generate) && grid_returned != NULL) {
      443:  262:    if (grid_returned != copy) {
      406:  263:      grid_free (copy);
        -:  264:    }
        -:  265:
      443:  266:    free (choice);
      443:  267:    return grid_returned;
        -:  268:  }
        -:  269:
    41660:  270:  grid_free (copy);
    41660:  271:  grid_free (grid_returned);
        -:  272:
    41660:  273:  grid_choice_discard (grid, *choice);
    41660:  274:  free (choice);
        -:  275:
    41660:  276:  nb_backtrack++;
    41660:  277:  return grid_backtrack (grid, mode, output_file);
        -:  278:}
        -:  279:
        -:  280:/************ GRID_SOLVER ************/
      105:  281:static grid_t *grid_solver (grid_t *grid, const mode_type mode,
        -:  282:                            FILE *output_file) {
      105:  283:  if (grid == NULL) {
        -:  284:    return NULL;
        -:  285:  }
        -:  286:
      105:  287:  nb_sol = 0;
        -:  288:
      105:  289:  grid_t *grid_final = grid_backtrack (grid, mode, output_file);
      105:  290:  if (mode == mode_all && nb_sol == 0) {
        5:  291:    fprintf (output_file, "The grid hasn't been solved !\n"
        -:  292:                          "The initial grid isn't consistent!\n\n");
        5:  293:    error = true;
        5:  294:    return NULL;
        -:  295:  }
        -:  296:
       25:  297:  if (mode == mode_all) {
       25:  298:    if (grid != grid_final) {
       25:  299:      free (grid_final);
        -:  300:    }
       25:  301:    return NULL;
        -:  302:  }
        -:  303:
        -:  304:  return grid_final;
        -:  305:}
        -:  306:
        -:  307:/************ GRID_GENERATE ************/
        5:  308:grid_t *grid_generate (size_t size, bool unique) {
        5:  309:  grid_t *grid = grid_alloc (size);
        5:  310:  if (grid == NULL) {
        -:  311:    return NULL;
        -:  312:  }
        -:  313:
       51:  314:  for (size_t row = 0; row < size; row++) {
      656:  315:    for (size_t column = 0; column < size; column++) {
      610:  316:      grid_set_cell (grid, row, column, colors_full (size));
        -:  317:    }
        -:  318:  }
        -:  319:
        5:  320:  prng_init ();
        5:  321:  size_t sqrt_size = sqrt (grid_get_size (grid));
        -:  322:
        -:  323:  /* Fill the first block*/
       19:  324:  for (size_t row = 0; row < sqrt_size; row++) {
       60:  325:    for (size_t column = 0; column < sqrt_size; column++) {
       46:  326:      grid_set_cell_random (grid, row, column);
       46:  327:      grid_heuristic (grid);
        -:  328:    }
        -:  329:  }
        -:  330:
        -:  331:  /* Fill the first row and column */
       51:  332:  for (size_t i = 0; i < grid_get_size (grid); i++) {
       46:  333:    grid_set_cell_random (grid, 0, i);
       46:  334:    grid_set_cell_random (grid, i, 0);
       46:  335:    grid_heuristic (grid);
        -:  336:  }
        -:  337:
        -:  338:  grid_t *return_grid = NULL;
        5:  339:  bool test;
        5:  340:  do {
        5:  341:    if (return_grid != NULL) {
    #####:  342:      grid_free (return_grid);
        -:  343:    }
        -:  344:
        5:  345:    clock_debut = clock ();
        5:  346:    grid_t *grid_tmp = grid_copy (grid);
        -:  347:
        5:  348:    return_grid = grid_backtrack (grid_tmp, mode_generate, stdout);
        -:  349:
        5:  350:    if (grid_tmp != return_grid) {
        4:  351:      grid_free (grid_tmp);
        -:  352:    }
        -:  353:
        5:  354:    test = false;
        5:  355:    if (return_grid != NULL) {
        5:  356:      test = grid_is_solved (return_grid) && grid_is_consistent (return_grid);
        -:  357:    }
        5:  358:  } while (!test);
        -:  359:
        5:  360:  if (return_grid != grid) {
        5:  361:    grid_free (grid);
        -:  362:  }
        -:  363:
        -:  364:  /* Select random cell to clear */
        5:  365:  size_t full_size = size * size;
        5:  366:  size_t nb_empty_cell = full_size - full_size * FILLED_RATIO;
        -:  367:
        5:  368:  size_t i = 0;
        5:  369:  size_t rand_index;
        5:  370:  size_t row;
        5:  371:  size_t column;
        -:  372:
      187:  373:  while (i <= nb_empty_cell) {
      182:  374:    rand_index = rand () % full_size;
      182:  375:    row = rand_index / size;
      182:  376:    column = rand_index % size;
        -:  377:
      182:  378:    colors_t tmp = grid_get_cell_colors (return_grid, row, column);
        -:  379:
      182:  380:    if (colors_is_singleton (tmp)) {
      157:  381:      grid_set_cell (return_grid, row, column, colors_full (size));
      157:  382:      i++;
        -:  383:    }
      182:  384:    if (unique) {
       78:  385:      nb_sol = 0;
       78:  386:      grid_t *grid_test = grid_copy (return_grid);
       78:  387:      grid_t *tmp_grid = grid_backtrack (grid_test, mode_unique, stdout);
        -:  388:
       78:  389:      if (tmp_grid != grid_test) {
       78:  390:        grid_free (tmp_grid);
        -:  391:      }
       78:  392:      grid_free (grid_test);
        -:  393:
       78:  394:      if (nb_sol >= 2) {
    #####:  395:        grid_set_cell_colors (return_grid, row, column, tmp);
    #####:  396:        i--;
        -:  397:      }
        -:  398:    }
        -:  399:  }
        -:  400:
        -:  401:  return return_grid;
        -:  402:}
        -:  403:
        -:  404:/************ USAGE ************/
       1*:  405:void usage () {
    #####:  406:  printf ("Usage: sudoku [-a|-o FILE|-v|-V|-h] FILE...\n"
        -:  407:          "       sudoku -g[SIZE] [-u|-o FILE|-v|-V|inputFile-h]\n"
        -:  408:          "Solve or generate Sudoku grids of size: 1, 4, 9, 16, 25, 36, 49, "
        -:  409:          "64\n\n"
        -:  410:          "-a,--all                search for all possible solutions\n"
        -:  411:          "-g[N],--generate[=N]    generate a grid of size NxN (default: 9)\n"
        -:  412:          "-o FILE,--outpout FILE  write output to FILE\n"
        -:  413:          "-u,--unique             generate a grid with unique solution\n"
        -:  414:          "-v,--verbose            verbose output\n"
        -:  415:          "-V,--version            display version and exit\n"
        -:  416:          "-h,--help               display this help and exit\n");
    #####:  417:}
        -:  418:
        -:  419:/************ MAIN ************/
       12:  420:int main (int argc, char *argv[]) {
        -:  421:
       12:  422:  mode_type mode = mode_first;
       12:  423:  bool unique = false;
       12:  424:  int size_grid = 0;
        -:  425:
        -:  426:  /* Check the different option entry by the user */
       12:  427:  int optc;
       12:  428:  char *name_output_file = NULL;
       12:  429:  FILE *output_file = stdout;
        -:  430:
       12:  431:  const char *short_opts = "ao:uvVhg::";
       12:  432:  const struct option lopt[] = {{"help", no_argument, NULL, 'h'},
        -:  433:                                {"all", no_argument, NULL, 'a'},
        -:  434:                                {"generate", optional_argument, NULL, 'g'},
        -:  435:                                {"output", required_argument, NULL, 'o'},
        -:  436:                                {"unique", no_argument, NULL, 'u'},
        -:  437:                                {"verbose", no_argument, NULL, 'v'},
        -:  438:                                {"version", no_argument, NULL, 'V'},
        -:  439:                                {NULL, 0, NULL, 0}};
        -:  440:
       21:  441:  while ((optc = getopt_long (argc, argv, short_opts, lopt, NULL)) != -1) {
       12:  442:    switch (optc) {
        -:  443:    case 'a':
        -:  444:      mode = mode_all;
        -:  445:      break;
        -:  446:
        6:  447:    case 'g':
        6:  448:      if (!optarg) {
        -:  449:        size_grid = DEFAULT_SIZE;
        -:  450:        break;
        -:  451:      }
        5:  452:      size_grid = atoi (optarg);
        5:  453:      if (size_grid == 0) {
    #####:  454:        errx (EXIT_FAILURE,
        -:  455:              "error : the argument pass to the option 'generate' is not an "
        -:  456:              "integer\n");
        -:  457:      }
        5:  458:      if (!grid_check_size (size_grid)) {
        1:  459:        errx (EXIT_FAILURE, "error : invalid size of grid\n");
        -:  460:      }
        -:  461:      break;
        -:  462:
        1:  463:    case 'o':
        1:  464:      name_output_file = optarg;
        1:  465:      break;
        -:  466:
        1:  467:    case 'u':
        1:  468:      unique = true;
        1:  469:      break;
        -:  470:
        1:  471:    case 'V':
        1:  472:      printf ("sudoku %i.%i.%i\n", VERSION, REVISION, SUBVERSION);
        1:  473:      printf ("Solve/generate sudoku grids of size: 1, 4, 9, 16, 25, 36, 49, "
        -:  474:              "64\n");
        1:  475:      return EXIT_SUCCESS;
        -:  476:
        1:  477:    case 'v':
        1:  478:      verbose = true;
        1:  479:      break;
        -:  480:
        -:  481:    case 'h':
        1:  482:      usage ();
        1:  483:      return EXIT_SUCCESS;
        -:  484:
    #####:  485:    default:
    #####:  486:      errx (EXIT_FAILURE, "error: invalid option '%s'!\n", argv[optind - 1]);
        -:  487:    }
        -:  488:  }
        -:  489:
        -:  490:  /*Test if we are in solver with no file*/
        9:  491:  if (argc - optind == 0 && size_grid == 0) {
    #####:  492:    errx (EXIT_FAILURE, "error : no input grid given !\n");
        -:  493:  }
        -:  494:
        -:  495:  /*Check if different option are in conflict*/
        9:  496:  if (size_grid != 0 && mode == mode_all) {
    #####:  497:    warnx (
        -:  498:        "warning : option 'all' conflict with generate mode, disabling it !");
        -:  499:  }
        -:  500:
        9:  501:  if (size_grid == 0 && unique) {
    #####:  502:    warnx ("warning : option 'unique' conflict with solver mode, disabling "
        -:  503:           "it !");
        -:  504:  }
        -:  505:
        -:  506:  /*Test if the files are readable*/
      128:  507:  for (int i = optind; i < argc; i++) {
      119:  508:    if (access (argv[i], R_OK) != 0) {
    #####:  509:      errx (EXIT_FAILURE, "error : the file %s is not readable\n", argv[i]);
        -:  510:    }
        -:  511:  }
        -:  512:
        -:  513:  /* Generate a grid */
        9:  514:  if (size_grid != 0) {
        5:  515:    grid_t *grid = grid_generate (size_grid, unique);
        5:  516:    grid_print (grid, output_file);
        5:  517:    grid_free (grid);
        -:  518:  }
        -:  519:
        -:  520:  /*Solve the grid*/
        9:  521:  if (name_output_file != NULL) {
        1:  522:    output_file = fopen (name_output_file, "w+");
        1:  523:    if (output_file == NULL) {
    #####:  524:      errx (EXIT_FAILURE, "error : the file cannot be opened correctly\n");
        -:  525:    }
        -:  526:  }
        -:  527:
      128:  528:  for (int i = optind; i < argc; i++) {
        -:  529:    /* Reset global variable*/
      119:  530:    fill_ratio = 0;
      119:  531:    nb_choice = 0;
      119:  532:    nb_backtrack = 0;
      119:  533:    nb_sol = 0;
        -:  534:
      119:  535:    fprintf (output_file, "# Solving '%s'...\n\n", argv[i]);
      119:  536:    grid_t *grid = file_parser (argv[i]);
        -:  537:
      119:  538:    if (grid != NULL) {
      105:  539:      if (verbose) {
       30:  540:        fprintf (output_file, "# Initial grid:\n");
       30:  541:        grid_print (grid, output_file);
        -:  542:      }
        -:  543:
      105:  544:      grid_t *grid_solve = grid_solver (grid, mode, output_file);
        -:  545:
      105:  546:      if (mode == mode_first) {
       75:  547:        status_t status = grid_heuristic (grid_solve);
        -:  548:
       75:  549:        if (status == grid_solved) {
       65:  550:          fprintf (output_file, "# Solution:\n");
       65:  551:          grid_print (grid_solve, output_file);
        -:  552:        }
        -:  553:
       75:  554:        if (status == grid_inconsistent) {
       10:  555:          fprintf (output_file, "The grid hasn't been solved !\n");
       10:  556:          fprintf (output_file, "The initial grid isn't consistent!\n\n");
       10:  557:          error = true;
        -:  558:        }
        -:  559:
       75:  560:        if (grid != grid_solve) {
       43:  561:          grid_free (grid_solve);
        -:  562:        }
        -:  563:      }
        -:  564:
      105:  565:      grid_free (grid);
        -:  566:
      105:  567:      if (verbose) {
       30:  568:        fprintf (output_file,
        -:  569:                 "# Statistics for the current run\n"
        -:  570:                 "# Initial fill ratio: %li%%\n"
        -:  571:                 "# Number of choices: %li\n"
        -:  572:                 "# Number of backtracks: %li\n",
        -:  573:                 fill_ratio, nb_choice, nb_backtrack);
        -:  574:
       30:  575:        if (mode == mode_first) {
       30:  576:          fprintf (output_file, "\n");
        -:  577:        }
        -:  578:      }
        -:  579:
      105:  580:      if (mode == mode_all) {
       30:  581:        fprintf (output_file, "# Number of solutions: %li\n\n", nb_sol);
        -:  582:      }
        -:  583:    }
        -:  584:  }
        -:  585:
        9:  586:  if (output_file != stdout) {
        1:  587:    fclose (output_file);
        -:  588:  }
        -:  589:
        9:  590:  return (!error) ? EXIT_SUCCESS : EXIT_FAILURE;
        -:  591:}
