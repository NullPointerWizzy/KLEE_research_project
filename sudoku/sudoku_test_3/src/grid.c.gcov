        -:    0:Source:grid.c
        -:    0:Graph:grid.gcno
        -:    0:Data:grid.gcda
        -:    0:Runs:179
        -:    1:#include "grid.h"
        -:    2:
        -:    3:#include <stdlib.h>
        -:    4:#include <unistd.h>
        -:    5:
        -:    6:#include <assert.h>
        -:    7:#include <math.h>
        -:    8:#include <time.h>
        -:    9:
        -:   10:/* Internal structure (hidden from outside) for a sudoku grid */
        -:   11:struct _grid_t {
        -:   12:  size_t size;
        -:   13:  colors_t **cells;
        -:   14:};
        -:   15:
        -:   16:/************ GRID_CHECK_SIZE ************/
      145:   17:bool grid_check_size (const size_t size) {
      145:   18:  return size == 1 || size == 4 || size == 9 || size == 16 || size == 25 ||
      145:   19:         size == 36 || size == 49 || size == 64;
        -:   20:}
        -:   21:
        -:   22:/************ GRID_ALLOC ************/
      145:   23:grid_t *grid_alloc (size_t size) {
      145:   24:  if (!grid_check_size (size)) {
        -:   25:    return NULL;
        -:   26:  }
        -:   27:
      145:   28:  grid_t *grid = malloc (sizeof (grid_t));
      145:   29:  if (grid == NULL) {
        -:   30:    return NULL;
        -:   31:  }
        -:   32:
      145:   33:  grid->size = size;
        -:   34:
      145:   35:  grid->cells = malloc (size * sizeof (colors_t *));
      145:   36:  if (grid->cells == NULL) {
    #####:   37:    free (grid);
    #####:   38:    return NULL;
        -:   39:  }
        -:   40:
     1450:   41:  for (size_t i = 0; i < size; i++) {
     1305:   42:    grid->cells[i] = malloc (size * sizeof (colors_t));
        -:   43:
     1305:   44:    if (grid->cells[i] == NULL) {
    #####:   45:      for (size_t j = 0; j < i; j++) {
    #####:   46:        free (grid->cells[i]);
        -:   47:      }
        -:   48:
    #####:   49:      free (grid->cells);
    #####:   50:      free (grid);
    #####:   51:      return NULL;
        -:   52:    }
        -:   53:  }
        -:   54:  return grid;
        -:   55:}
        -:   56:
        -:   57:/************ GRID_FREE ************/
      145:   58:void grid_free (grid_t *grid) {
      145:   59:  if (grid == NULL) {
        -:   60:    return;
        -:   61:  }
        -:   62:
      145:   63:  if (grid->cells == NULL) {
    #####:   64:    free (grid);
    #####:   65:    return;
        -:   66:  }
        -:   67:
     1450:   68:  for (size_t i = 0; i < grid->size; i++) {
     1305:   69:    free (grid->cells[i]);
        -:   70:  }
        -:   71:
      145:   72:  free (grid->cells);
      145:   73:  free (grid);
        -:   74:}
        -:   75:
        -:   76:/************ GRID_PRINT ************/
        5:   77:void grid_print (const grid_t *grid, FILE *fd) {
        5:   78:  if (grid == NULL) {
        -:   79:    return;
        -:   80:  }
        -:   81:
       50:   82:  for (size_t row = 0; row < grid->size; row++) {
      450:   83:    for (size_t column = 0; column < grid->size; column++) {
        -:   84:
      405:   85:      if (colors_is_singleton (grid->cells[row][column])) {
     3000:   86:        for (size_t index = 0; index < grid->size; index++) {
     2700:   87:          if (colors_is_in (grid->cells[row][column], index)) {
      300:   88:            fputc (color_table[index], fd);
        -:   89:          }
        -:   90:        }
        -:   91:
        -:   92:      } else {
      105:   93:        fputc ('_', fd);
        -:   94:      }
        -:   95:
      405:   96:      fputc (' ', fd);
        -:   97:    }
        -:   98:
       45:   99:    fputc ('\n', fd);
        -:  100:  }
        -:  101:
        5:  102:  fputc ('\n', fd);
        -:  103:}
        -:  104:
        -:  105:/************ GIRD_CHECK_CHAR ************/
    #####:  106:bool grid_check_char (const grid_t *grid, const char c) {
    #####:  107:  assert (grid != NULL);
        -:  108:
    #####:  109:  if (c == EMPTY_CELL) {
        -:  110:    return true;
        -:  111:  }
        -:  112:
    #####:  113:  for (size_t i = 0; i < grid->size; i++) {
    #####:  114:    if (c == color_table[i]) {
        -:  115:      return true;
        -:  116:    }
        -:  117:  }
        -:  118:
        -:  119:  return false;
        -:  120:}
        -:  121:
        -:  122:/************ GRID_COPY ************/
      140:  123:grid_t *grid_copy (const grid_t *grid) {
      140:  124:  if (grid == NULL) {
        -:  125:    return NULL;
        -:  126:  }
        -:  127:
      140:  128:  grid_t *grid_copy = grid_alloc (grid->size);
      140:  129:  if (grid_copy == NULL) {
        -:  130:    return NULL;
        -:  131:  }
        -:  132:
     1400:  133:  for (size_t row = 0; row < grid_copy->size; row++) {
    12600:  134:    for (size_t column = 0; column < grid_copy->size; column++) {
    11340:  135:      grid_copy->cells[row][column] = grid->cells[row][column];
        -:  136:    }
        -:  137:  }
        -:  138:
        -:  139:  return grid_copy;
        -:  140:}
        -:  141:
        -:  142:/************ GRID_GET_CELL ************/
    #####:  143:char *grid_get_cell (const grid_t *grid, const size_t row,
        -:  144:                     const size_t column) {
    #####:  145:  if (grid == NULL || row >= grid->size || column >= grid->size) {
        -:  146:    return NULL;
        -:  147:  }
        -:  148:
    #####:  149:  char *buffer = malloc ((grid->size + 1) * sizeof (char));
    #####:  150:  if (buffer == NULL) {
        -:  151:    return NULL;
        -:  152:  }
        -:  153:
        -:  154:  int buffer_size = 0;
    #####:  155:  for (size_t index = 0; index < grid->size; index++) {
    #####:  156:    if (colors_is_in (grid->cells[row][column], index)) {
    #####:  157:      buffer[buffer_size] = color_table[index];
    #####:  158:      buffer_size++;
        -:  159:    }
        -:  160:  }
        -:  161:
    #####:  162:  buffer[buffer_size] = '\0';
        -:  163:
    #####:  164:  return buffer;
        -:  165:}
        -:  166:
        -:  167:/************ GRID_GET_CELL_COLORS ************/
      121:  168:colors_t grid_get_cell_colors (const grid_t *grid, const size_t row,
        -:  169:                               const size_t column) {
      121:  170:  return grid->cells[row][column];
        -:  171:}
        -:  172:
        -:  173:/************ GRID_SIZE ************/
       55:  174:size_t grid_get_size (const grid_t *grid) {
       55:  175:  if (grid == NULL) {
        -:  176:    return 0;
        -:  177:  }
       55:  178:  return grid->size;
        -:  179:}
        -:  180:
        -:  181:/************ GRID_SET_CELL ************/
      510:  182:void grid_set_cell (grid_t *grid, const size_t row, const size_t column,
        -:  183:                    const char color) {
      510:  184:  if (grid == NULL || row >= grid->size || column >= grid->size) {
        -:  185:    return;
        -:  186:  }
        -:  187:
     5610:  188:  for (size_t index = 0; index <= grid->size; index++) {
     5100:  189:    if (color_table[index] == color) {
    #####:  190:      grid->cells[row][column] = colors_set (index);
    #####:  191:      return;
        -:  192:    }
        -:  193:  }
        -:  194:
      510:  195:  grid->cells[row][column] = colors_full (grid->size);
        -:  196:}
        -:  197:
        -:  198:/************ GRID_SET_CELL_RANDOM ************/
      135:  199:void grid_set_cell_random (grid_t *grid, const size_t row,
        -:  200:                           const size_t column) {
      135:  201:  if (grid == NULL || row >= grid->size || column >= grid->size) {
        -:  202:    return;
        -:  203:  }
        -:  204:
      135:  205:  grid->cells[row][column] = colors_random (grid->cells[row][column]);
        -:  206:}
        -:  207:
        -:  208:/************ GRID_SET_CELL_COLORS ************/
    #####:  209:void grid_set_cell_colors (grid_t *grid, const size_t row, const size_t column,
        -:  210:                           const colors_t colors) {
    #####:  211:  if (grid == NULL || row >= grid->size || column >= grid->size) {
        -:  212:    return;
        -:  213:  }
        -:  214:
    #####:  215:  grid->cells[row][column] = colors;
        -:  216:}
        -:  217:
        -:  218:/************ SUBGRID_APPLY ************/
      828:  219:bool subgrid_apply (grid_t *grid,
        -:  220:                    bool (*func) (colors_t *subgrid[], const size_t size),
      828:  221:                    bool is_heuristic) {
     828*:  222:  assert (grid != NULL);
      828:  223:  size_t size = grid->size;
      828:  224:  colors_t *subgrid_row[size];
      828:  225:  colors_t *subgrid_column[size];
      828:  226:  colors_t *subgrid_block[size];
      828:  227:  bool test = false;
        -:  228:
      828:  229:  size_t cpt = 0;
      828:  230:  size_t sqrt_size = sqrt (size);
      828:  231:  size_t x_block;
      828:  232:  size_t y_block;
        -:  233:
     8280:  234:  for (size_t row = 0; row < size; row++) {
    74520:  235:    for (size_t column = 0; column < size; column++) {
        -:  236:
    67068:  237:      subgrid_row[column] = &grid->cells[row][column];
    67068:  238:      subgrid_column[column] = &grid->cells[column][row];
        -:  239:
    67068:  240:      if (column == sqrt_size * (1 + cpt)) {
    14904:  241:        cpt++;
        -:  242:      }
        -:  243:
    67068:  244:      x_block = (row / sqrt_size) * sqrt_size;
    67068:  245:      y_block = (row % sqrt_size) * sqrt_size;
        -:  246:
    67068:  247:      subgrid_block[column] =
    67068:  248:          &grid->cells[x_block + cpt][y_block + column % sqrt_size];
        -:  249:    }
        -:  250:
     7452:  251:    cpt = 0;
        -:  252:
     7452:  253:    if (is_heuristic) {
     4077:  254:      test = func (subgrid_row, size) || test;
     4077:  255:      test = func (subgrid_column, size) || test;
     5663:  256:      test = func (subgrid_block, size) || test;
        -:  257:    }
        -:  258:
    10827:  259:    if (!is_heuristic &&
    10125:  260:        (!func (subgrid_row, size) || !func (subgrid_column, size) ||
     3375:  261:         !func (subgrid_block, size))) {
    #####:  262:      return true;
        -:  263:    }
        -:  264:  }
        -:  265:  return test;
        -:  266:}
        -:  267:
        -:  268:/************ GRID_IS_SOLVED ************/
      235:  269:bool grid_is_solved (grid_t *grid) {
     235*:  270:  assert (grid != NULL);
        -:  271:
      503:  272:  for (size_t row = 0; row < grid->size; row++) {
     3627:  273:    for (size_t column = 0; column < grid->size; column++) {
     3359:  274:      if (!colors_is_singleton (grid->cells[row][column])) {
        -:  275:        return false;
        -:  276:      }
        -:  277:    }
        -:  278:  }
        -:  279:
        -:  280:  return true;
        -:  281:}
        -:  282:
        -:  283:/************ GRID_IS_CONSISTENT ************/
      375:  284:bool grid_is_consistent (grid_t *grid) {
     375*:  285:  assert (grid != NULL);
        -:  286:
      375:  287:  return !subgrid_apply (grid, subgrid_consistency, false);
        -:  288:}
        -:  289:
        -:  290:/************ GRID_HEURISTICS ************/
      230:  291:status_t grid_heuristic (grid_t *grid) {
      230:  292:  if (grid == NULL) {
        -:  293:    return grid_inconsistent;
        -:  294:  }
        -:  295:
      453:  296:  while (subgrid_apply (grid, subgrid_heuristics, true))
        -:  297:    ;
        -:  298:
      230:  299:  if (!grid_is_consistent (grid)) {
        -:  300:    return grid_inconsistent;
        -:  301:  }
        -:  302:
      230:  303:  if (grid_is_solved (grid)) {
        5:  304:    return grid_solved;
        -:  305:  }
        -:  306:
        -:  307:  return grid_unsolved;
        -:  308:}
        -:  309:
        -:  310:/************ GRID_CHOICE_IS_EMPTY ************/
      135:  311:bool grid_choice_is_empty (const choice_t choice) { return choice.color == 0; }
        -:  312:
        -:  313:/************ GRID_CHOICE_APPLY ************/
      135:  314:void grid_choice_apply (grid_t *grid, const choice_t choice) {
     135*:  315:  assert (grid != NULL);
        -:  316:
      135:  317:  grid->cells[choice.row][choice.column] = choice.color;
      135:  318:}
        -:  319:
        -:  320:/************ GRID_CHOICE_DISCARD ************/
    #####:  321:void grid_choice_discard (grid_t *grid, const choice_t choice) {
    #####:  322:  assert (grid != NULL);
        -:  323:
    #####:  324:  colors_t new_color =
    #####:  325:      colors_subtract (grid->cells[choice.row][choice.column], choice.color);
    #####:  326:  grid->cells[choice.row][choice.column] = new_color;
    #####:  327:}
        -:  328:
        -:  329:/************ GRID_CHOICE_PRINT ************/
    #####:  330:void grid_choice_print (const choice_t choice, FILE *fd) {
    #####:  331:  fprintf (fd, "The choice is row = %li, column = %li and color = %li.\n",
    #####:  332:           choice.row, choice.column, choice.color);
    #####:  333:}
        -:  334:
        -:  335:/************ GRID_CHOICE ************/
      135:  336:choice_t *grid_choice (grid_t *grid) {
     135*:  337:  assert (grid != NULL);
        -:  338:
      135:  339:  choice_t *choice = calloc (1, sizeof (choice_t));
      135:  340:  if (choice == NULL) {
        -:  341:    return NULL;
        -:  342:  }
        -:  343:
      135:  344:  choice->color = colors_full (grid->size);
        -:  345:
      135:  346:  size_t min = grid->size;
      135:  347:  size_t count_color;
        -:  348:
      906:  349:  for (size_t i = 0; i < grid->size; i++) {
     8148:  350:    for (size_t j = 0; j < grid->size; j++) {
        -:  351:
     7377:  352:      if (!colors_is_singleton (grid->cells[i][j])) {
        -:  353:
     3657:  354:        count_color = colors_count (grid->cells[i][j]);
     3657:  355:        if (count_color <= min) {
     1131:  356:          choice->row = i;
     1131:  357:          choice->column = j;
     1131:  358:          choice->color = colors_random (grid->cells[i][j]);
     1131:  359:          min = count_color;
        -:  360:
     1131:  361:          if (min == 2) {
        -:  362:            return choice;
        -:  363:          }
        -:  364:        }
        -:  365:      }
        -:  366:    }
        -:  367:  }
        -:  368:  return choice;
        -:  369:}
